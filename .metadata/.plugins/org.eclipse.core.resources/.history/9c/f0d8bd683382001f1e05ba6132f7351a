package ejercicio.subasta;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Subasta {
    private final String nombreProducto;
    private final Usuario propietario;
    private boolean abierta;
    private final List<Puja> pujas;

    public Subasta(String nombreProducto, Usuario propietario) {
        this.nombreProducto = nombreProducto;
        this.propietario = propietario;
        this.abierta = true;
        this.pujas = new ArrayList<>();
    }

    public String getNombreProducto() {
        return nombreProducto;
    }

    public Usuario getPropietario() {
        return propietario;
    }

    public boolean isAbierta() {
        return abierta;
    }

    public List<Puja> getPujas() {
        return new ArrayList<>(pujas);
    }

    public Puja getPujaMayor() {

    	return pujas.stream()
    			.max((p1,p2) -> Float.compare(p1.getCantidad(), p2.getCantidad()))
    			//.max(Comparator.comparingDouble(Puja::getCantidad))
    			.orElse(null);
    	
    }

    public boolean pujar(Usuario usuario, float cantidad) {
        if (!abierta || usuario == propietario || usuario.getCredito() < cantidad) {
            return false; //caso de que no puedan apostar 
        }

        Puja pujaMayor = getPujaMayor(); 
        if (pujaMayor != null && cantidad <= pujaMayor.getCantidad()) { // La puja debe ser mayor
            return false;
        }

        Puja nuevaPuja = new Puja(usuario, cantidad, this);
        pujas.add(nuevaPuja); // Creamos la puja y la aÃ±adimos a la lista de pujas
        return true;
    }

    public boolean pujar(Usuario usuario) {
        float cantidad = getPujaMayor() != null ? getPujaMayor().getCantidad() + 1 : 1;
        return pujar(usuario, cantidad);
    }

    public boolean ejecutar() {
        if (!abierta || pujas.isEmpty()) {
            return false;
        }

        Puja pujaMayor = getPujaMayor();
        Usuario ganador = pujaMayor.getPujador();
        float cantidad = pujaMayor.getCantidad();

        ganador.decrementar(cantidad);
        propietario.incrementar(cantidad);
        abierta = false;

        return true;
    }
}
