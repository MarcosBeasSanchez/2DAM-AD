package ejercicio.subasta;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Subasta {
    private final String nombreProducto;
    private final Usuario propietario;
    private boolean abierta;
    private final List<Puja> pujas;

    public Subasta(String nombreProducto, Usuario propietario) {
        this.nombreProducto = nombreProducto;
        this.propietario = propietario;
        this.abierta = true;
        this.pujas = new ArrayList<>();
    }

    public String getNombreProducto() {
        return nombreProducto;
    }

    public Usuario getPropietario() {
        return propietario;
    }

    public boolean isAbierta() {
        return abierta;
    }

    public List<Puja> getPujas() {
        return new ArrayList<>(pujas);
    }

    public Puja getPujaMayor() {

    	return pujas.stream()
    			.max((p1,p2) -> Float.compare(p1.getCantidad(), p2.getCantidad()))
    			//.max(Comparator.comparingDouble(Puja::getCantidad))
    			.orElse(null);
    	
    }
    
    public void mostrarPujaMayor() {
    	 System.out.println("La puja mayor es : " + getPujaMayor().getPujador());
    }

    public boolean pujar(Usuario usuario, float cantidad) {
        if (!abierta || usuario == propietario || usuario.getCredito() < cantidad) {
            return false; //caso de que no puedan apostar 
        }

        Puja pujaMayor = getPujaMayor(); 
        if (pujaMayor != null && cantidad <= pujaMayor.getCantidad()) { // La puja debe ser mayor
            return false;
        }

        Puja nuevaPuja = new Puja(usuario, cantidad, this);
        pujas.add(nuevaPuja); // Creamos la puja y la añadimos a la lista de pujas
        return true;
    }

    public boolean pujar(Usuario usuario) {
        float cantidad = getPujaMayor() != null ? getPujaMayor().getCantidad() + 1 : 1;
        return pujar(usuario, cantidad);
    }

    public boolean ejecutar() {
        if (!abierta || pujas.isEmpty()) {
            return false; // no se puede ejecutar si la subasta está cerrada o no hay pujas
        }

        // Obtener la puja mayor
        Puja pujaMayor = getPujaMayor();
        
        if (pujaMayor == null) {
            return false; // Verificación adicional por seguridad
        }
        
        Usuario ganador = pujaMayor.getPujador();
        float cantidad = pujaMayor.getCantidad();

        // Decrementar el crédito del ganador
        if (ganador.getCredito() >= cantidad) {
            ganador.decrementar(cantidad);  // Restar el crédito del ganador
            // Incrementar el crédito del propietario
            propietario.incrementar(cantidad);  // Sumar el crédito al propietario
            // Cerrar la subasta
            abierta = false;
            return true;
        } else {
            return false; // Si el crédito del ganador es insuficiente (aunque no debería ocurrir)
        }
    }

}
